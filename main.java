import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;

import java.beans.Expression;
import java.io.IOException;

public class main {
    public static void main(String[] args) throws IOException{

        // we expect exactly one argument: the name of the input file
        if (args.length!=1) {
            System.err.println("\n");
            System.err.println("Impl Interpreter\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }
        String filename=args[0];

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        implLexer lex = new implLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        implParser parser = new implParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        Interpreter interpreter = new Interpreter();

        AST result = (AST)interpreter.visit(parseTree);

        //System.out.println("The result is: "+
        result.eval(new Environment());

    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply an Integer.

class Interpreter extends AbstractParseTreeVisitor<AST> implements implVisitor<AST> {

    @Override
    public AST visitStart(implParser.StartContext ctx) {
        System.out.println("start visited");
        return visit(ctx);
    }

    @Override
    public AST visitAssignment(implParser.AssignmentContext ctx) {
        return null;
    }

    @Override
    public AST visitLatches(implParser.LatchesContext ctx) {
        return null;
    }

    @Override
    public AST visitSig(implParser.SigContext ctx) {
        return null;
    }

    @Override
    public AST visitBoolNot(implParser.BoolNotContext ctx) {
        return null;
    }

    @Override
    public AST visitBoolOr(implParser.BoolOrContext ctx) {
        return null;
    }

    @Override
    public AST visitParentheses(implParser.ParenthesesContext ctx) {
        return null;
    }

    @Override
    public AST visitBoolAnd(implParser.BoolAndContext ctx) {
        return null;
    }

    @Override
    public AST visitInpseq(implParser.InpseqContext ctx) {
        return null;
    }
}
