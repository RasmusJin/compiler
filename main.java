import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException{

        // we expect exactly one argument: the name of the input file
        if (args.length!=1) {
            System.err.println("\n");
            System.err.println("Impl Interpreter\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }
        String filename=args[0];

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        implLexer lex = new implLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        implParser parser = new implParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        Interpreter interpreter = new Interpreter();

        Command result = (Command)interpreter.visit(parseTree);

        //System.out.println("The result is: "+
        //result.eval(new Environment());

    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply an Integer.

class Interpreter extends AbstractParseTreeVisitor<AST> implements implVisitor<AST> {

    @Override
    public AST visitStart(implParser.StartContext ctx) {
        System.out.println("starting program"+""+ctx.nm.getText());
        ArrayList<String>input=new ArrayList<>();
        ArrayList<String>output=new ArrayList<>();
        ArrayList<Latch> latchList=new ArrayList<>();
        HashMap<String, Expr>update=new HashMap<>();
        HashMap<String, List<Boolean>>insequence=new HashMap<>();
        HashMap<String, List<Boolean>> outValues = new HashMap<>();
        ArrayList<String> signals = new ArrayList<>();
        for (Token inp:ctx.in) {
            input.add(inp.getText());
        }
        for (Token outp:ctx.out) {
            output.add(outp.getText());
            outValues.put(outp.getText(),new ArrayList<>());
        }
        for (implParser.LatchesContext lat:ctx.lt ) {
            latchList.add(new Latch(lat.in.getText(), lat.out.getText()));
        }
        for (implParser.AssignmentContext assign:ctx.sig) {
            signals.add(assign.x.getText());
            update.put(assign.x.getText(),(Expr)visit(assign.e));

        }
        for (implParser.InpseqContext seq:ctx.inp) {
            inpseq tempIn = new inpseq(seq.e1.getText(), seq.e2);
            insequence.put(seq.e1.getText(), tempIn.getInseq());
        }
        Environment env = new Environment();

        for (int i = 0; i < insequence.get(input.get(0)).size(); i++) {
            for (Latch latch:latchList) {
                latch.updateLatch(env);
            }
            for (String signal:input) {
                env.setVariable(signal,insequence.get(signal).get(i));
            }
            for (String assign:signals) {
                env.setVariable(assign,update.get(assign).eval(env));
            }
            for (String tempOut:outValues.keySet()) {
                if(outValues.get(tempOut)==null){

                }
                outValues.get(tempOut).add(env.getVariable(tempOut));

            }
        }

        StringBuilder str = new StringBuilder();


        for (String inOut:input) {
            for (Boolean tempVal:insequence.get(inOut)) {
                if(!tempVal){
                    str.append('0');
                }
                else{
                    str.append('1');
                }
            }
            str.append(" ").append(inOut);
        }
        StringBuilder strOut = new StringBuilder();
        for (String inOut:output) {
            for (Boolean tempVal:outValues.get(inOut)) {
                if(!tempVal){
                    strOut.append('0');
                }
                else{
                    strOut.append('1');
                }
            }
            strOut.append(" ").append(inOut).append("\n");
        }
        System.out.println(str);
        System.out.println(strOut);

        return new Start();
    }

    @Override
    public AST visitAssignment(implParser.AssignmentContext ctx) {
        System.out.println("in assignment");
        return new Assignment(ctx.x.getText(),(Expr)visit(ctx.e));
    }
    @Override
    public AST visitLatches(implParser.LatchesContext ctx) {
        return new Latch(ctx.in.getText(),ctx.out.getText());
    }
    @Override
    public AST visitSig(implParser.SigContext ctx) {
        return new sig((ctx.e1.getText()));
    }

    @Override
    public AST visitBoolNot(implParser.BoolNotContext ctx) {
        return new b_not((Expr)visit(ctx.e1));
    }

    @Override
    public AST visitBoolOr(implParser.BoolOrContext ctx) {
        return new b_or((Expr)visit(ctx.e1),(Expr)visit(ctx.e2));
    }

    @Override
    public AST visitParentheses(implParser.ParenthesesContext ctx) {
        return new parentheses((Expr)visit(ctx.e1));
    }

    @Override
    public AST visitBoolAnd(implParser.BoolAndContext ctx) {
        return new b_and((Expr)visit(ctx.e1),(Expr)visit(ctx.e2));
    }

    @Override
    public AST visitInpseq(implParser.InpseqContext ctx) {
        return null;
    }
}
